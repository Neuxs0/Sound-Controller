plugins {
    id "java"
    id "jigsaw"
    id "com.github.johnrengelman.shadow"
}

sourceSets {
    main {
        java { srcDirs = ["../puzzle/main/java"] }
        resources { srcDirs = ["../puzzle/main/resources"] }
    }
}

loom {
    mods {
        "${property('mod_id')}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation project(':src:common')

    cosmicReach("finalforeach:cosmicreach-alpha:${property('cosmic_reach_version')}")
}

processResources {
    from(project(':src:common').sourceSets.main.resources)

    inputs.property 'mod_version', rootProject.property('mod_version')
    inputs.property 'mod_id', rootProject.property('mod_id')
    inputs.property 'mod_name', rootProject.property('mod_name')
    inputs.property 'mod_group', rootProject.property('mod_group')
    inputs.property 'mod_description', rootProject.property('mod_description')

    filesMatching('*.json') {
        expand(
                'mod_version'               : rootProject.property('mod_version'),
                'mod_id'                    : rootProject.property('mod_id'),
                'mod_name'                  : rootProject.property('mod_name'),
                'mod_group'                 : rootProject.property('mod_group'),
                'mod_description'           : rootProject.property('mod_description'),
                'mod_license'               : rootProject.property('mod_license'),
                'cosmic_reach_dependency'   : rootProject.property('cosmic_reach_dependency'),
                'puzzle_loader_dependency'  : rootProject.property('puzzle_loader_dependency'),
                'homepage_link'             : rootProject.property('homepage_link'),
                'issues_link'               : rootProject.property('issues_link'),
                'sources_link'              : rootProject.property('sources_link')
        )
    }
}

jar {
    archiveClassifier = 'standard-puzzle'
    manifest {
        attributes('MixinConfigs': "${rootProject.property('mod_id')}.mixins.json")
    }
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    enabled = true
    archiveClassifier = 'puzzle'
    archiveBaseName = rootProject.property('mod_name').replace(' ', '_')
    archiveVersion = rootProject.property('mod_version')

    configurations = []

    from project(':src:common').sourceSets.main.output
    from sourceSets.main.output
    from(tasks.named('processResources').map { it.destinationDir }) {
        include 'puzzle.mod.json'
        include '*.manipulator'
    }

    manifest {
        attributes('MixinConfigs': "${rootProject.property('mod_id')}.mixins.json")
    }
    mergeServiceFiles()
}